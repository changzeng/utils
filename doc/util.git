# 查看某次commit的更改
git show commit_id

# 版本回退
git reset --hard commit_id

# git查看所有远程分支
git branch -r

# git拉取远程分支到本地，不切换到该分支
git checkout -b 本地分支名 origin/远程分支名

# git拉取远程分支到本地，切换到该分支
git fetch origin 远程分支名:本地分支名

# 图的方式显示所有提交以及分支的历史
git log --graph --all --color=auto

# 删除一个没有打开的分支
git branch -d <branch_name>

# 删除一个远程分支
git branch -r -d origin/branch-name
git push origin :branch-name

# git强制拉取远程分支
git fetch --all && git reset --hard origin/master && git pull

# git pull fetch区别
git fetch只拉取合并单个分支；git pull可拉取合并不同分支

# 查看单个文件的修改历史
git log -p file_name

# 查看任意两次提交之间的差别(加stat参数只显示修改的行数)
git diff --stat commit_id_a commit_id_b

# 查看任意两个分支之间的差别(加stat参数只显示修改的行数)
git diff branch1 branch2

# 修改最后一次提交的注释
git commit --amend

# non-fast-forward冲突解决
Non-fast-forward的出现原因在于：git仓库中已经有一部分代码，所以它不允许你直接把你的代码覆盖上去。于是你有2个选择方式：
1，强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容
git push -f
2，先把git的东西fetch到你本地然后merge后再push
git fetch
git merge

# 查看所有本地分支的HEAD位置
git branch -vv

# 查看所有远程分支的HEAD位置
git branch -r -vv

# git reset hard与soft的区别
hard会重置本地文件，soft会将文件修改保存在缓存区中/本地文件不会修改

# 将文件从缓存区中删除但保留本地文件
git rm --cached file_name